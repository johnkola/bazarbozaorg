plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'war'
}

group = 'com.bazarbozorg'
version = '1.0.0'
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenLocal() // For locally published artifacts
    mavenCentral()
    maven {
        url = uri('https://jitpack.io')
    }
}

// TypeList Generator Configuration
def typeListGenConfig = [
        sheetsFolder: "${layout.projectDirectory}/domain-types-xlsx",
        outputFolder: "${layout.projectDirectory}/src/main/java",
        packageName : "com.bazarbozorg.model.types"
]

// Create a separate JavaExec task for TypeList generation with specific main class
tasks.register('executeTypeListGenerator', JavaExec) {
    description = 'Executes TypeList Generator application'
    group = 'build'

    // Set max heap size to ensure enough memory
    maxHeapSize = "512m"

    // Configure classpath and main class
    classpath = files() + configurations.runtimeClasspath

    // Use specific main class
    mainClass = 'com.bazarbozorg.generator.TypeListGeneratorApplication'

    // Add program arguments
    args = [
            "--sheets-folder=${typeListGenConfig.sheetsFolder}",
            "--output-folder-root=${typeListGenConfig.outputFolder}",
            "--package-name=${typeListGenConfig.packageName}"
    ]

    // Configure standard output and error
    standardOutput = System.out
    errorOutput = System.err
}

// Create TypeList Generator Task
tasks.register('generateTypeLists') {
    description = 'Generates TypeList classes from CSV and Excel files'
    group = 'build'

    // Use the specific implementation with the known main class
    dependsOn(tasks.named('executeTypeListGenerator'))

    doLast {
        logger.lifecycle("TypeList classes generated successfully")

        // Verify that files were actually generated
        def outputDir = new File(typeListGenConfig.outputFolder.toString())
        def generatedFiles = outputDir.listFiles()

        if (generatedFiles == null || generatedFiles.length == 0) {
            logger.warn("WARNING: No files were generated in ${outputDir}")
        } else {
            logger.lifecycle("Generated ${generatedFiles.length} files:")
            generatedFiles.each { file ->
                logger.lifecycle("  - ${file.name}")
            }
        }
    }
}

// Add generated sources to main source set
sourceSets {
    main {
        java {
            srcDir(typeListGenConfig.outputFolder)
        }
    }
}

// Make compileJava depend on generateTypeLists
tasks.named('compileJava') {
    dependsOn(tasks.named('generateTypeLists'))
}

configurations.configureEach {
    // Force certain versions for security purposes
    resolutionStrategy {
        force 'org.apache.commons:commons-compress:1.26.1' // Fixes CVE-2024-25710 and CVE-2024-26308
        force 'org.xmlunit:xmlunit-core:2.10.0' // Fixes CVE-2024-31573
    }
}

dependencies {
    // Spring Boot Core
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // JPA & Data Access - Updated MongoDB dependency
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Fixing MongoDB issue with correct driver version
    implementation 'org.mongodb:mongodb-driver-sync:4.11.1'

    // OpenAPI Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // GraphQL Support (with WebFlux excluded)
    implementation('org.springframework.boot:spring-boot-starter-graphql') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-webflux'
    }

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Database Drivers
    runtimeOnly 'com.h2database:h2:2.2.224' // For testing/development
    runtimeOnly 'org.postgresql:postgresql:42.7.4' // Optional: For PostgreSQL support

    // Apache POI (for Excel processing)
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'

    // JSON Processing & Utility Libraries
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'commons-io:commons-io:2.15.1'
    implementation 'com.networknt:json-schema-validator:1.0.86'

    // TypeList Generator
    implementation 'com.bazarbozorg.typelist.generator:bazarbozorg-core:1.0-SNAPSHOT:all'

    // Testing Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-junit-jupiter'

    // Embedded MongoDB for testing - ensure it's compatible with your MongoDB driver
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.12.2'

    // GraphQL Testing
    testImplementation('org.springframework.graphql:spring-graphql-test') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-webflux'
    }
}

// For Spring Boot applications, we can use bootJar instead of war
tasks.named('bootJar') {
    archiveFileName = "${project.name}-${project.version}.jar"
}

// If you still need a WAR file for external deployment
tasks.named('bootWar') {
    enabled = true
    archiveFileName = "${project.name}-${project.version}.war"
}

tasks.named('war') {
    enabled = false // Disable the standard war task
}

tasks.named('test') {
    useJUnitPlatform()
}

// Add Spring Boot run task customizations
bootRun {
    // Enable live reload during development
    systemProperty('spring.devtools.restart.enabled', 'true')
}