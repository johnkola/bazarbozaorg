// Generated by Bazarbozorg TypeList Generator
package com.bazarbozorg.model.types;

import java.lang.Override;
import java.lang.String;
import java.util.UUID;

/**
 * TypeList enum generated from Excel file for Permission
 * Generated on: 2025-03-15T17:53:25.5208211
 * @see com.bazarbozorg.model.types.TypeList
 */
public enum PermissionTypeList implements TypeList<PermissionTypeList> {
  READ_USER("READ_USER", UUID.fromString("7d8e9f0a-1b2c-3d4e-5f6a-7b8c9d0e1f2a")),

  CREATE_USER("CREATE_USER", UUID.fromString("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d")),

  UPDATE_USER("UPDATE_USER", UUID.fromString("3e4f5a6b-7c8d-9e0f-1a2b-3c4d5e6f7a8b")),

  DELETE_USER("DELETE_USER", UUID.fromString("5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f")),

  READ_ROLE("READ_ROLE", UUID.fromString("9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d")),

  CREATE_ROLE("CREATE_ROLE", UUID.fromString("2d3e4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a")),

  UPDATE_ROLE("UPDATE_ROLE", UUID.fromString("8b9c0d1e-2f3a-4b5c-6d7e-8f9a0b1c2d3e")),

  DELETE_ROLE("DELETE_ROLE", UUID.fromString("4f5a6b7c-8d9e-0f1a-2b3c-4d5e6f7a8b9c")),

  READ_REPORT("READ_REPORT", UUID.fromString("6a7b8c9d-0e1f-2a3b-4c5d-6e7f8a9b0c1d")),

  CREATE_REPORT("CREATE_REPORT", UUID.fromString("0c1d2e3f-4a5b-6c7d-8e9f-0a1b2c3d4e5f")),

  EXPORT_REPORT("EXPORT_REPORT", UUID.fromString("2e3f4a5b-6c7d-8e9f-0a1b-2c3d4e5f6a7b")),

  ADMIN_ACCESS("ADMIN_ACCESS", UUID.fromString("8d9e0f1a-2b3c-4d5e-6f7a-8b9c0d1e2f3a")),

  VIEW_DASHBOARD("VIEW_DASHBOARD", UUID.fromString("4e5f6a7b-8c9d-0e1f-2a3b-4c5d6e7f8a9b")),

  MANAGE_SYSTEM("MANAGE_SYSTEM", UUID.fromString("0f1a2b3c-4d5e-6f7a-8b9c-0d1e2f3a4b5c")),

  API_ACCESS("API_ACCESS", UUID.fromString("6f7a8b9c-0d1e-2f3a-4b5c-6d7e8f9a0b1c")),

  EDIT_SETTINGS("EDIT_SETTINGS", UUID.fromString("2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e"));

  static {
    TypeList.register(PermissionTypeList.class);
  }

  private final String code;

  private final UUID id;

  private PermissionTypeList(String code, UUID id) {
    this.code = code;
    this.id = id;
  }

  /**
   * Find enum constant by UUID.
   * @param id the UUID to search for
   * @return the matching enum constant or null if not found
   */
  public static PermissionTypeList fromId(UUID id) {
    return TypeList.fromId(PermissionTypeList.class, id);
  }

  /**
   * Find enum constant by code.
   * @param code the code to search for
   * @return the matching enum constant or null if not found
   */
  public static PermissionTypeList fromCode(String code) {
    for (PermissionTypeList value : values()) {
      if (value.getCode().equals(code)) {
        return value;
      }
    }
    return null;
  }

  @Override
  public UUID getId() {
    return id;
  }

  @Override
  public String getCode() {
    return code;
  }

  @Override
  public String toString() {
    return code;
  }
}
